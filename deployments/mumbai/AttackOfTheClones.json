{
  "address": "0x8C30bF0bb18416f1d08810cA8Ab28AD5CA81a231",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "_xpToken",
          "type": "address"
        },
        {
          "internalType": "contract IRewardNft",
          "name": "_rewardNft",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_cryptoPunks",
          "type": "address"
        },
        {
          "internalType": "contract MinimalForwarder",
          "name": "forwarder",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_vrfCoordinator",
          "type": "address"
        },
        {
          "internalType": "uint64",
          "name": "_vrfSubscriptionId",
          "type": "uint64"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "have",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "want",
          "type": "address"
        }
      ],
      "name": "OnlyCoordinatorCanFulfill",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "xp",
          "type": "uint256"
        }
      ],
      "name": "AttackExecuted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "bossIndex",
          "type": "uint256"
        }
      ],
      "name": "BossInvoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalBosses",
          "type": "uint256"
        }
      ],
      "name": "BossesPopulated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "height",
          "type": "uint256"
        }
      ],
      "name": "CharacterGenerated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "character",
          "type": "address"
        }
      ],
      "name": "CharacterHealed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferRequested",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "randomWords",
          "type": "uint256[]"
        }
      ],
      "name": "ReceivedRandomness",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "numWords",
          "type": "uint32"
        }
      ],
      "name": "RequestSent",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "RewardsClaimed",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "COORDINATOR",
      "outputs": [
        {
          "internalType": "contract VRFCoordinatorV2Interface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "acceptOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "bosses",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "hp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "damage",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "reward",
          "type": "uint256"
        },
        {
          "internalType": "uint16",
          "name": "punkIndex",
          "type": "uint16"
        },
        {
          "internalType": "bool",
          "name": "active",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "bossesToGenerate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "characters",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "hp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "damage",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "xp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lastFireballAttack",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "active",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "height",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "charactersCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "boss",
          "type": "uint256"
        }
      ],
      "name": "claimRewards",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "claimableExperience",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cryptoPunks",
      "outputs": [
        {
          "internalType": "contract CryptopunksDataInterface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "currentBoss",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fireballAttack",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fireballDamagePoints",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "generateCharacter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getBossesCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "characterToHeal",
          "type": "address"
        }
      ],
      "name": "healCharacter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "healthPoints",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "invokeBoss",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "bossIndex",
          "type": "uint256"
        }
      ],
      "name": "isBossAlive",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "character",
          "type": "address"
        }
      ],
      "name": "isCharacterAlive",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isCurrentBossAlive",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "forwarder",
          "type": "address"
        }
      ],
      "name": "isTrustedForwarder",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxBosses",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxHealthPoints",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "bossHealthPoints",
          "type": "uint256"
        }
      ],
      "name": "populateBosses",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "index",
          "type": "uint16"
        }
      ],
      "name": "punkAttributes",
      "outputs": [
        {
          "internalType": "string",
          "name": "text",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "index",
          "type": "uint16"
        }
      ],
      "name": "punkImage",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "index",
          "type": "uint16"
        }
      ],
      "name": "punkImageSvg",
      "outputs": [
        {
          "internalType": "string",
          "name": "svg",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "randomWords",
          "type": "uint256[]"
        }
      ],
      "name": "rawFulfillRandomWords",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "regularAttack",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "regularDamagePoints",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardNft",
      "outputs": [
        {
          "internalType": "contract IRewardNft",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "s_requests",
      "outputs": [
        {
          "internalType": "bool",
          "name": "fulfilled",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "exists",
          "type": "bool"
        },
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_fireballDamagePoints",
          "type": "uint256"
        }
      ],
      "name": "setFireballDamagePoints",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_regularDamagePoints",
          "type": "uint256"
        }
      ],
      "name": "setRegularDamagePoints",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vrfKeyHash",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "xpToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xf94e3c28fbd320c700b05f359d3ee621e3649938886c733fc82dfda9121b556f",
  "receipt": {
    "to": null,
    "from": "0x2F9e6880f09675e3d28835B4241e769be3d28F3E",
    "contractAddress": "0x8C30bF0bb18416f1d08810cA8Ab28AD5CA81a231",
    "transactionIndex": 20,
    "gasUsed": "3876807",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008000000000000000000000008000000000000000000000000000000000800000000000000000001100000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000800000000000000000000000200000000000000000080000000000000000000000000000000000000000004000000000000000000001000000000100000000000000000000100000000000000000000000000000000000000000000000000800000000000000000000100000",
    "blockHash": "0xa9d74ce95a84556073c0119cab22252fb330e8dadea07aca688a8c108d3b92cb",
    "transactionHash": "0xf94e3c28fbd320c700b05f359d3ee621e3649938886c733fc82dfda9121b556f",
    "logs": [
      {
        "transactionIndex": 20,
        "blockNumber": 28961303,
        "transactionHash": "0xf94e3c28fbd320c700b05f359d3ee621e3649938886c733fc82dfda9121b556f",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x0000000000000000000000002f9e6880f09675e3d28835b4241e769be3d28f3e",
          "0x0000000000000000000000003a22c8bc68e98b0faf40f349dd2b2890fae01484"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000012a99a7d81ad9c000000000000000000000000000000000000000000000000053d4cf11497d1470000000000000000000000000000000000000000000000001fb586756f422449000000000000000000000000000000000000000000000000052aa356971623ab0000000000000000000000000000000000000000000000001fc8300fecc3d1e5",
        "logIndex": 109,
        "blockHash": "0xa9d74ce95a84556073c0119cab22252fb330e8dadea07aca688a8c108d3b92cb"
      }
    ],
    "blockNumber": 28961303,
    "cumulativeGasUsed": "11380844",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xF0Fc6F4242CfB677a5ba5FdD342922ee83f6C7E2",
    "0xCD054591d99A15384E4e097CB009aDcAe62fe924",
    "0x5607A9b8605bF876802a40051B5bbc63B6F623a1",
    "0xF0Fc6F4242CfB677a5ba5FdD342922ee83f6C7E2",
    "0xf6D7a3A7D81493a3A109cD488d0a077bbCB68dd5",
    1
  ],
  "numDeployments": 1,
  "solcInputHash": "c98351e54fc982d6c8e7eafceb408619",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_xpToken\",\"type\":\"address\"},{\"internalType\":\"contract IRewardNft\",\"name\":\"_rewardNft\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_cryptoPunks\",\"type\":\"address\"},{\"internalType\":\"contract MinimalForwarder\",\"name\":\"forwarder\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_vrfCoordinator\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"_vrfSubscriptionId\",\"type\":\"uint64\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"have\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"want\",\"type\":\"address\"}],\"name\":\"OnlyCoordinatorCanFulfill\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"xp\",\"type\":\"uint256\"}],\"name\":\"AttackExecuted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bossIndex\",\"type\":\"uint256\"}],\"name\":\"BossInvoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalBosses\",\"type\":\"uint256\"}],\"name\":\"BossesPopulated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"height\",\"type\":\"uint256\"}],\"name\":\"CharacterGenerated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"character\",\"type\":\"address\"}],\"name\":\"CharacterHealed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"randomWords\",\"type\":\"uint256[]\"}],\"name\":\"ReceivedRandomness\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"numWords\",\"type\":\"uint32\"}],\"name\":\"RequestSent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"RewardsClaimed\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"COORDINATOR\",\"outputs\":[{\"internalType\":\"contract VRFCoordinatorV2Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"bosses\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"hp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"damage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"punkIndex\",\"type\":\"uint16\"},{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bossesToGenerate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"characters\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"hp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"damage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"xp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastFireballAttack\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"height\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"charactersCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"boss\",\"type\":\"uint256\"}],\"name\":\"claimRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"claimableExperience\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cryptoPunks\",\"outputs\":[{\"internalType\":\"contract CryptopunksDataInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentBoss\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fireballAttack\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fireballDamagePoints\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"generateCharacter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBossesCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"characterToHeal\",\"type\":\"address\"}],\"name\":\"healCharacter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"healthPoints\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"invokeBoss\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"bossIndex\",\"type\":\"uint256\"}],\"name\":\"isBossAlive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"character\",\"type\":\"address\"}],\"name\":\"isCharacterAlive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isCurrentBossAlive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"}],\"name\":\"isTrustedForwarder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxBosses\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxHealthPoints\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"bossHealthPoints\",\"type\":\"uint256\"}],\"name\":\"populateBosses\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"index\",\"type\":\"uint16\"}],\"name\":\"punkAttributes\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"text\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"index\",\"type\":\"uint16\"}],\"name\":\"punkImage\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"index\",\"type\":\"uint16\"}],\"name\":\"punkImageSvg\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"svg\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"randomWords\",\"type\":\"uint256[]\"}],\"name\":\"rawFulfillRandomWords\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"regularAttack\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"regularDamagePoints\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardNft\",\"outputs\":[{\"internalType\":\"contract IRewardNft\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"s_requests\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"fulfilled\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"exists\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fireballDamagePoints\",\"type\":\"uint256\"}],\"name\":\"setFireballDamagePoints\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_regularDamagePoints\",\"type\":\"uint256\"}],\"name\":\"setRegularDamagePoints\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vrfKeyHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"xpToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"claimRewards(uint256)\":{\"params\":{\"boss\":\"the boss which was attacked and killed  \"}},\"fireballAttack()\":{\"details\":\"executes a firball attack only callable by character with master or champion level\"},\"healCharacter(address)\":{\"params\":{\"characterToHeal\":\"address of the character to heal\"}},\"invokeBoss()\":{\"details\":\"used to initialize the currentBoss at the start of the games \"},\"populateBosses(uint256)\":{\"params\":{\"bossHealthPoints\":\"health points tp be assigned to the new bosses \"}},\"punkAttributes(uint16)\":{\"params\":{\"index\":\"the punk index, 0 <= index < 10000\"}},\"punkImageSvg(uint16)\":{\"params\":{\"index\":\"the punk index, 0 <= index < 10000\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"acceptOwnership()\":{\"notice\":\"Allows an ownership transfer to be completed by the recipient.\"},\"claimRewards(uint256)\":{\"notice\":\"called by characters to claim rewards they earned by participating in attacking a boss\"},\"healCharacter(address)\":{\"notice\":\"called by master or champion character to heal a dead character\"},\"invokeBoss()\":{\"notice\":\"loads a new currentBoss once the old boss is defeated. \"},\"owner()\":{\"notice\":\"Get the current owner\"},\"populateBosses(uint256)\":{\"notice\":\"cpopulated bosses\"},\"punkAttributes(uint16)\":{\"notice\":\"The Cryptopunk attributes for the given index. The attributes are a comma-separated list in UTF-8 string format. The first entry listed is not technically an attribute, but the \\\"head type\\\" of the Cryptopunk.\"},\"punkImageSvg(uint16)\":{\"notice\":\"The Cryptopunk image for the given index, in SVG format. In the SVG, each \\\"pixel\\\" is represented as a 1x1 rectangle.\"},\"regularAttack()\":{\"notice\":\"executes a regular attack\"},\"setFireballDamagePoints(uint256)\":{\"notice\":\"sets teh amount of damage caused by a fireball attack\"},\"setRegularDamagePoints(uint256)\":{\"notice\":\"sets teh amount of damage caused by a regular attack\"},\"transferOwnership(address)\":{\"notice\":\"Allows an owner to begin transferring ownership to a new address, pending.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/AttackOfTheClones.sol\":\"AttackOfTheClones\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/ConfirmedOwner.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ConfirmedOwnerWithProposal.sol\\\";\\n\\n/**\\n * @title The ConfirmedOwner contract\\n * @notice A contract with helpers for basic contract ownership.\\n */\\ncontract ConfirmedOwner is ConfirmedOwnerWithProposal {\\n  constructor(address newOwner) ConfirmedOwnerWithProposal(newOwner, address(0)) {}\\n}\\n\",\"keccak256\":\"0x99d0b0786fe368970009c703f2249bfbc56340ddf1a28b60d2915bb58c34cd72\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/ConfirmedOwnerWithProposal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./interfaces/OwnableInterface.sol\\\";\\n\\n/**\\n * @title The ConfirmedOwner contract\\n * @notice A contract with helpers for basic contract ownership.\\n */\\ncontract ConfirmedOwnerWithProposal is OwnableInterface {\\n  address private s_owner;\\n  address private s_pendingOwner;\\n\\n  event OwnershipTransferRequested(address indexed from, address indexed to);\\n  event OwnershipTransferred(address indexed from, address indexed to);\\n\\n  constructor(address newOwner, address pendingOwner) {\\n    require(newOwner != address(0), \\\"Cannot set owner to zero\\\");\\n\\n    s_owner = newOwner;\\n    if (pendingOwner != address(0)) {\\n      _transferOwnership(pendingOwner);\\n    }\\n  }\\n\\n  /**\\n   * @notice Allows an owner to begin transferring ownership to a new address,\\n   * pending.\\n   */\\n  function transferOwnership(address to) public override onlyOwner {\\n    _transferOwnership(to);\\n  }\\n\\n  /**\\n   * @notice Allows an ownership transfer to be completed by the recipient.\\n   */\\n  function acceptOwnership() external override {\\n    require(msg.sender == s_pendingOwner, \\\"Must be proposed owner\\\");\\n\\n    address oldOwner = s_owner;\\n    s_owner = msg.sender;\\n    s_pendingOwner = address(0);\\n\\n    emit OwnershipTransferred(oldOwner, msg.sender);\\n  }\\n\\n  /**\\n   * @notice Get the current owner\\n   */\\n  function owner() public view override returns (address) {\\n    return s_owner;\\n  }\\n\\n  /**\\n   * @notice validate, transfer ownership, and emit relevant events\\n   */\\n  function _transferOwnership(address to) private {\\n    require(to != msg.sender, \\\"Cannot transfer to self\\\");\\n\\n    s_pendingOwner = to;\\n\\n    emit OwnershipTransferRequested(s_owner, to);\\n  }\\n\\n  /**\\n   * @notice validate access\\n   */\\n  function _validateOwnership() internal view {\\n    require(msg.sender == s_owner, \\\"Only callable by owner\\\");\\n  }\\n\\n  /**\\n   * @notice Reverts if called by anyone other than the contract owner.\\n   */\\n  modifier onlyOwner() {\\n    _validateOwnership();\\n    _;\\n  }\\n}\\n\",\"keccak256\":\"0xa2f137a1d066795aeac76226e58f33c982278cdd34b4f09e5a2243d5a0924654\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/** ****************************************************************************\\n * @notice Interface for contracts using VRF randomness\\n * *****************************************************************************\\n * @dev PURPOSE\\n *\\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\\n * @dev making his output up to suit himself. Reggie provides Vera a public key\\n * @dev to which he knows the secret key. Each time Vera provides a seed to\\n * @dev Reggie, he gives back a value which is computed completely\\n * @dev deterministically from the seed and the secret key.\\n *\\n * @dev Reggie provides a proof by which Vera can verify that the output was\\n * @dev correctly computed once Reggie tells it to her, but without that proof,\\n * @dev the output is indistinguishable to her from a uniform random sample\\n * @dev from the output space.\\n *\\n * @dev The purpose of this contract is to make it easy for unrelated contracts\\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\\n * @dev simple access to a verifiable source of randomness. It ensures 2 things:\\n * @dev 1. The fulfillment came from the VRFCoordinator\\n * @dev 2. The consumer contract implements fulfillRandomWords.\\n * *****************************************************************************\\n * @dev USAGE\\n *\\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\\n * @dev initialize VRFConsumerBase's attributes in their constructor as\\n * @dev shown:\\n *\\n * @dev   contract VRFConsumer {\\n * @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\\n * @dev       VRFConsumerBase(_vrfCoordinator) public {\\n * @dev         <initialization with other arguments goes here>\\n * @dev       }\\n * @dev   }\\n *\\n * @dev The oracle will have given you an ID for the VRF keypair they have\\n * @dev committed to (let's call it keyHash). Create subscription, fund it\\n * @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface\\n * @dev subscription management functions).\\n * @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,\\n * @dev callbackGasLimit, numWords),\\n * @dev see (VRFCoordinatorInterface for a description of the arguments).\\n *\\n * @dev Once the VRFCoordinator has received and validated the oracle's response\\n * @dev to your request, it will call your contract's fulfillRandomWords method.\\n *\\n * @dev The randomness argument to fulfillRandomWords is a set of random words\\n * @dev generated from your requestId and the blockHash of the request.\\n *\\n * @dev If your contract could have concurrent requests open, you can use the\\n * @dev requestId returned from requestRandomWords to track which response is associated\\n * @dev with which randomness request.\\n * @dev See \\\"SECURITY CONSIDERATIONS\\\" for principles to keep in mind,\\n * @dev if your contract could have multiple requests in flight simultaneously.\\n *\\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\\n * @dev differ.\\n *\\n * *****************************************************************************\\n * @dev SECURITY CONSIDERATIONS\\n *\\n * @dev A method with the ability to call your fulfillRandomness method directly\\n * @dev could spoof a VRF response with any random value, so it's critical that\\n * @dev it cannot be directly called by anything other than this base contract\\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\\n *\\n * @dev For your users to trust that your contract's random behavior is free\\n * @dev from malicious interference, it's best if you can write it so that all\\n * @dev behaviors implied by a VRF response are executed *during* your\\n * @dev fulfillRandomness method. If your contract must store the response (or\\n * @dev anything derived from it) and use it later, you must ensure that any\\n * @dev user-significant behavior which depends on that stored value cannot be\\n * @dev manipulated by a subsequent VRF request.\\n *\\n * @dev Similarly, both miners and the VRF oracle itself have some influence\\n * @dev over the order in which VRF responses appear on the blockchain, so if\\n * @dev your contract could have multiple VRF requests in flight simultaneously,\\n * @dev you must ensure that the order in which the VRF responses arrive cannot\\n * @dev be used to manipulate your contract's user-significant behavior.\\n *\\n * @dev Since the block hash of the block which contains the requestRandomness\\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\\n * @dev miner could, in principle, fork the blockchain to evict the block\\n * @dev containing the request, forcing the request to be included in a\\n * @dev different block with a different hash, and therefore a different input\\n * @dev to the VRF. However, such an attack would incur a substantial economic\\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\\n * @dev until it calls responds to a request. It is for this reason that\\n * @dev that you can signal to an oracle you'd like them to wait longer before\\n * @dev responding to the request (however this is not enforced in the contract\\n * @dev and so remains effective only in the case of unmodified oracle software).\\n */\\nabstract contract VRFConsumerBaseV2 {\\n  error OnlyCoordinatorCanFulfill(address have, address want);\\n  address private immutable vrfCoordinator;\\n\\n  /**\\n   * @param _vrfCoordinator address of VRFCoordinator contract\\n   */\\n  constructor(address _vrfCoordinator) {\\n    vrfCoordinator = _vrfCoordinator;\\n  }\\n\\n  /**\\n   * @notice fulfillRandomness handles the VRF response. Your contract must\\n   * @notice implement it. See \\\"SECURITY CONSIDERATIONS\\\" above for important\\n   * @notice principles to keep in mind when implementing your fulfillRandomness\\n   * @notice method.\\n   *\\n   * @dev VRFConsumerBaseV2 expects its subcontracts to have a method with this\\n   * @dev signature, and will call it once it has verified the proof\\n   * @dev associated with the randomness. (It is triggered via a call to\\n   * @dev rawFulfillRandomness, below.)\\n   *\\n   * @param requestId The Id initially returned by requestRandomness\\n   * @param randomWords the VRF output expanded to the requested number of words\\n   */\\n  function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal virtual;\\n\\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\\n  // the origin of the call\\n  function rawFulfillRandomWords(uint256 requestId, uint256[] memory randomWords) external {\\n    if (msg.sender != vrfCoordinator) {\\n      revert OnlyCoordinatorCanFulfill(msg.sender, vrfCoordinator);\\n    }\\n    fulfillRandomWords(requestId, randomWords);\\n  }\\n}\\n\",\"keccak256\":\"0x3d709a5e0f1f9b8841172b10ba8af785dd51a13eda9fc395723a706e51329904\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/OwnableInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface OwnableInterface {\\n  function owner() external returns (address);\\n\\n  function transferOwnership(address recipient) external;\\n\\n  function acceptOwnership() external;\\n}\\n\",\"keccak256\":\"0xb8b3a97783dddc198b790c4cec1eda7fb47aa38cbaea6555220d0ed8c735c086\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface VRFCoordinatorV2Interface {\\n  /**\\n   * @notice Get configuration relevant for making requests\\n   * @return minimumRequestConfirmations global min for request confirmations\\n   * @return maxGasLimit global max for request gas limit\\n   * @return s_provingKeyHashes list of registered key hashes\\n   */\\n  function getRequestConfig()\\n    external\\n    view\\n    returns (\\n      uint16,\\n      uint32,\\n      bytes32[] memory\\n    );\\n\\n  /**\\n   * @notice Request a set of random words.\\n   * @param keyHash - Corresponds to a particular oracle job which uses\\n   * that key for generating the VRF proof. Different keyHash's have different gas price\\n   * ceilings, so you can select a specific one to bound your maximum per request cost.\\n   * @param subId  - The ID of the VRF subscription. Must be funded\\n   * with the minimum subscription balance required for the selected keyHash.\\n   * @param minimumRequestConfirmations - How many blocks you'd like the\\n   * oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\\n   * for why you may want to request more. The acceptable range is\\n   * [minimumRequestBlockConfirmations, 200].\\n   * @param callbackGasLimit - How much gas you'd like to receive in your\\n   * fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\\n   * may be slightly less than this amount because of gas used calling the function\\n   * (argument decoding etc.), so you may need to request slightly more than you expect\\n   * to have inside fulfillRandomWords. The acceptable range is\\n   * [0, maxGasLimit]\\n   * @param numWords - The number of uint256 random values you'd like to receive\\n   * in your fulfillRandomWords callback. Note these numbers are expanded in a\\n   * secure way by the VRFCoordinator from a single random value supplied by the oracle.\\n   * @return requestId - A unique identifier of the request. Can be used to match\\n   * a request to a response in fulfillRandomWords.\\n   */\\n  function requestRandomWords(\\n    bytes32 keyHash,\\n    uint64 subId,\\n    uint16 minimumRequestConfirmations,\\n    uint32 callbackGasLimit,\\n    uint32 numWords\\n  ) external returns (uint256 requestId);\\n\\n  /**\\n   * @notice Create a VRF subscription.\\n   * @return subId - A unique subscription id.\\n   * @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\\n   * @dev Note to fund the subscription, use transferAndCall. For example\\n   * @dev  LINKTOKEN.transferAndCall(\\n   * @dev    address(COORDINATOR),\\n   * @dev    amount,\\n   * @dev    abi.encode(subId));\\n   */\\n  function createSubscription() external returns (uint64 subId);\\n\\n  /**\\n   * @notice Get a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @return balance - LINK balance of the subscription in juels.\\n   * @return reqCount - number of requests for this subscription, determines fee tier.\\n   * @return owner - owner of the subscription.\\n   * @return consumers - list of consumer address which are able to use this subscription.\\n   */\\n  function getSubscription(uint64 subId)\\n    external\\n    view\\n    returns (\\n      uint96 balance,\\n      uint64 reqCount,\\n      address owner,\\n      address[] memory consumers\\n    );\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @param newOwner - proposed new owner of the subscription\\n   */\\n  function requestSubscriptionOwnerTransfer(uint64 subId, address newOwner) external;\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @dev will revert if original owner of subId has\\n   * not requested that msg.sender become the new owner.\\n   */\\n  function acceptSubscriptionOwnerTransfer(uint64 subId) external;\\n\\n  /**\\n   * @notice Add a consumer to a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - New consumer which can use the subscription\\n   */\\n  function addConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Remove a consumer from a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - Consumer to remove from the subscription\\n   */\\n  function removeConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Cancel a subscription\\n   * @param subId - ID of the subscription\\n   * @param to - Where to send the remaining LINK to\\n   */\\n  function cancelSubscription(uint64 subId, address to) external;\\n\\n  /*\\n   * @notice Check to see if there exists a request commitment consumers\\n   * for all consumers and keyhashes for a given sub.\\n   * @param subId - ID of the subscription\\n   * @return true if there exists at least one unfulfilled request for the subscription, false\\n   * otherwise.\\n   */\\n  function pendingRequestExists(uint64 subId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x54cdc97717cbae1a51a5500c8ee4875ebf056c95b54d2155a9544a79cb4f4494\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/metatx/ERC2771Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (metatx/ERC2771Context.sol)\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Context variant with ERC2771 support.\\n */\\nabstract contract ERC2771Context is Context {\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable\\n    address private immutable _trustedForwarder;\\n\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor(address trustedForwarder) {\\n        _trustedForwarder = trustedForwarder;\\n    }\\n\\n    function isTrustedForwarder(address forwarder) public view virtual returns (bool) {\\n        return forwarder == _trustedForwarder;\\n    }\\n\\n    function _msgSender() internal view virtual override returns (address sender) {\\n        if (isTrustedForwarder(msg.sender)) {\\n            // The assembly code is more direct than the Solidity version using `abi.decode`.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                sender := shr(96, calldataload(sub(calldatasize(), 20)))\\n            }\\n        } else {\\n            return super._msgSender();\\n        }\\n    }\\n\\n    function _msgData() internal view virtual override returns (bytes calldata) {\\n        if (isTrustedForwarder(msg.sender)) {\\n            return msg.data[:msg.data.length - 20];\\n        } else {\\n            return super._msgData();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xb6a3e264c7fc4ec11d244561232b0f49dbccc75ce3d14e5f0181cf134fa6db29\",\"license\":\"MIT\"},\"@openzeppelin/contracts/metatx/MinimalForwarder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (metatx/MinimalForwarder.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/cryptography/ECDSA.sol\\\";\\nimport \\\"../utils/cryptography/draft-EIP712.sol\\\";\\n\\n/**\\n * @dev Simple minimal forwarder to be used together with an ERC2771 compatible contract. See {ERC2771Context}.\\n *\\n * MinimalForwarder is mainly meant for testing, as it is missing features to be a good production-ready forwarder. This\\n * contract does not intend to have all the properties that are needed for a sound forwarding system. A fully\\n * functioning forwarding system with good properties requires more complexity. We suggest you look at other projects\\n * such as the GSN which do have the goal of building a system like that.\\n */\\ncontract MinimalForwarder is EIP712 {\\n    using ECDSA for bytes32;\\n\\n    struct ForwardRequest {\\n        address from;\\n        address to;\\n        uint256 value;\\n        uint256 gas;\\n        uint256 nonce;\\n        bytes data;\\n    }\\n\\n    bytes32 private constant _TYPEHASH =\\n        keccak256(\\\"ForwardRequest(address from,address to,uint256 value,uint256 gas,uint256 nonce,bytes data)\\\");\\n\\n    mapping(address => uint256) private _nonces;\\n\\n    constructor() EIP712(\\\"MinimalForwarder\\\", \\\"0.0.1\\\") {}\\n\\n    function getNonce(address from) public view returns (uint256) {\\n        return _nonces[from];\\n    }\\n\\n    function verify(ForwardRequest calldata req, bytes calldata signature) public view returns (bool) {\\n        address signer = _hashTypedDataV4(\\n            keccak256(abi.encode(_TYPEHASH, req.from, req.to, req.value, req.gas, req.nonce, keccak256(req.data)))\\n        ).recover(signature);\\n        return _nonces[req.from] == req.nonce && signer == req.from;\\n    }\\n\\n    function execute(ForwardRequest calldata req, bytes calldata signature)\\n        public\\n        payable\\n        returns (bool, bytes memory)\\n    {\\n        require(verify(req, signature), \\\"MinimalForwarder: signature does not match request\\\");\\n        _nonces[req.from] = req.nonce + 1;\\n\\n        (bool success, bytes memory returndata) = req.to.call{gas: req.gas, value: req.value}(\\n            abi.encodePacked(req.data, req.from)\\n        );\\n\\n        // Validate that the relayer has sent enough gas for the call.\\n        // See https://ronan.eth.link/blog/ethereum-gas-dangers/\\n        if (gasleft() <= req.gas / 63) {\\n            // We explicitly trigger invalid opcode to consume all gas and bubble-up the effects, since\\n            // neither revert or assert consume all gas since Solidity 0.8.0\\n            // https://docs.soliditylang.org/en/v0.8.0/control-structures.html#panic-via-assert-and-error-via-require\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                invalid()\\n            }\\n        }\\n\\n        return (success, returndata);\\n    }\\n}\\n\",\"keccak256\":\"0xa7ed87944e085fd70a6633b8c9f4ec9027f682b1d179f5228f446aa49bba34e0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: address zero is not a valid owner\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: invalid token ID\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not token owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        _requireMinted(tokenId);\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` has not been minted yet.\\n     */\\n    function _requireMinted(uint256 tokenId) internal view virtual {\\n        require(_exists(tokenId), \\\"ERC721: invalid token ID\\\");\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x0b606994df12f0ce35f6d2f6dcdde7e55e6899cdef7e00f180980caa81e3844e\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xed6a749c5373af398105ce6ee3ac4763aa450ea7285d268c85d9eeca809cdb1f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/extensions/ERC721URIStorage.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\n\\n/**\\n * @dev ERC721 token with storage based token URI management.\\n */\\nabstract contract ERC721URIStorage is ERC721 {\\n    using Strings for uint256;\\n\\n    // Optional mapping for token URIs\\n    mapping(uint256 => string) private _tokenURIs;\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory _tokenURI = _tokenURIs[tokenId];\\n        string memory base = _baseURI();\\n\\n        // If there is no base URI, return the token URI.\\n        if (bytes(base).length == 0) {\\n            return _tokenURI;\\n        }\\n        // If both are set, concatenate the baseURI and tokenURI (via abi.encodePacked).\\n        if (bytes(_tokenURI).length > 0) {\\n            return string(abi.encodePacked(base, _tokenURI));\\n        }\\n\\n        return super.tokenURI(tokenId);\\n    }\\n\\n    /**\\n     * @dev Sets `_tokenURI` as the tokenURI of `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _setTokenURI(uint256 tokenId, string memory _tokenURI) internal virtual {\\n        require(_exists(tokenId), \\\"ERC721URIStorage: URI set of nonexistent token\\\");\\n        _tokenURIs[tokenId] = _tokenURI;\\n    }\\n\\n    /**\\n     * @dev See {ERC721-_burn}. This override additionally checks to see if a\\n     * token-specific URI was set for the token, and if so, it deletes the token URI from\\n     * the storage mapping.\\n     */\\n    function _burn(uint256 tokenId) internal virtual override {\\n        super._burn(tokenId);\\n\\n        if (bytes(_tokenURIs[tokenId]).length != 0) {\\n            delete _tokenURIs[tokenId];\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5c3501c1b70fcfc64417e9da5cc6a3597191baa354781e508e1e14cc0e50a038\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd6153ce99bcdcce22b124f755e72553295be6abcd63804cfdffceb188b8bef10\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Base64.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Base64.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides a set of functions to operate with Base64 strings.\\n *\\n * _Available since v4.5._\\n */\\nlibrary Base64 {\\n    /**\\n     * @dev Base64 Encoding/Decoding Table\\n     */\\n    string internal constant _TABLE = \\\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\\\";\\n\\n    /**\\n     * @dev Converts a `bytes` to its Bytes64 `string` representation.\\n     */\\n    function encode(bytes memory data) internal pure returns (string memory) {\\n        /**\\n         * Inspired by Brecht Devos (Brechtpd) implementation - MIT licence\\n         * https://github.com/Brechtpd/base64/blob/e78d9fd951e7b0977ddca77d92dc85183770daf4/base64.sol\\n         */\\n        if (data.length == 0) return \\\"\\\";\\n\\n        // Loads the table into memory\\n        string memory table = _TABLE;\\n\\n        // Encoding takes 3 bytes chunks of binary data from `bytes` data parameter\\n        // and split into 4 numbers of 6 bits.\\n        // The final Base64 length should be `bytes` data length multiplied by 4/3 rounded up\\n        // - `data.length + 2`  -> Round up\\n        // - `/ 3`              -> Number of 3-bytes chunks\\n        // - `4 *`              -> 4 characters for each chunk\\n        string memory result = new string(4 * ((data.length + 2) / 3));\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Prepare the lookup table (skip the first \\\"length\\\" byte)\\n            let tablePtr := add(table, 1)\\n\\n            // Prepare result pointer, jump over length\\n            let resultPtr := add(result, 32)\\n\\n            // Run over the input, 3 bytes at a time\\n            for {\\n                let dataPtr := data\\n                let endPtr := add(data, mload(data))\\n            } lt(dataPtr, endPtr) {\\n\\n            } {\\n                // Advance 3 bytes\\n                dataPtr := add(dataPtr, 3)\\n                let input := mload(dataPtr)\\n\\n                // To write each character, shift the 3 bytes (18 bits) chunk\\n                // 4 times in blocks of 6 bits for each character (18, 12, 6, 0)\\n                // and apply logical AND with 0x3F which is the number of\\n                // the previous character in the ASCII table prior to the Base64 Table\\n                // The result is then added to the table to get the character to write,\\n                // and finally write it in the result pointer but with a left shift\\n                // of 256 (1 byte) - 8 (1 ASCII char) = 248 bits\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(18, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(12, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(6, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(input, 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n            }\\n\\n            // When data `bytes` is not exactly 3 bytes long\\n            // it is padded with `=` characters at the end\\n            switch mod(mload(data), 3)\\n            case 1 {\\n                mstore8(sub(resultPtr, 1), 0x3d)\\n                mstore8(sub(resultPtr, 2), 0x3d)\\n            }\\n            case 2 {\\n                mstore8(sub(resultPtr, 1), 0x3d)\\n            }\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x5f3461639fe20794cfb4db4a6d8477388a15b2e70a018043084b7c4bedfa8136\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xaf159a8b1923ad2a26d516089bceca9bdeaeacd04be50983ea00ba63070f08a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.3) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        } else if (error == RecoverError.InvalidSignatureV) {\\n            revert(\\\"ECDSA: invalid signature 'v' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n        if (v != 27 && v != 28) {\\n            return (address(0), RecoverError.InvalidSignatureV);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\",\"keccak256\":\"0xdb7f5c28fc61cda0bd8ab60ce288e206b791643bcd3ba464a70cbec18895a2f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/cryptography/draft-EIP712.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ECDSA.sol\\\";\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\\n *\\n * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\\n * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\\n * they need in their contracts using a combination of `abi.encode` and `keccak256`.\\n *\\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\\n * ({_hashTypedDataV4}).\\n *\\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\\n * the chain id to protect against replay attacks on an eventual fork of the chain.\\n *\\n * NOTE: This contract implements the version of the encoding known as \\\"v4\\\", as implemented by the JSON RPC method\\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\\n *\\n * _Available since v3.4._\\n */\\nabstract contract EIP712 {\\n    /* solhint-disable var-name-mixedcase */\\n    // Cache the domain separator as an immutable value, but also store the chain id that it corresponds to, in order to\\n    // invalidate the cached domain separator if the chain id changes.\\n    bytes32 private immutable _CACHED_DOMAIN_SEPARATOR;\\n    uint256 private immutable _CACHED_CHAIN_ID;\\n    address private immutable _CACHED_THIS;\\n\\n    bytes32 private immutable _HASHED_NAME;\\n    bytes32 private immutable _HASHED_VERSION;\\n    bytes32 private immutable _TYPE_HASH;\\n\\n    /* solhint-enable var-name-mixedcase */\\n\\n    /**\\n     * @dev Initializes the domain separator and parameter caches.\\n     *\\n     * The meaning of `name` and `version` is specified in\\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\\n     *\\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\\n     * - `version`: the current major version of the signing domain.\\n     *\\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\\n     * contract upgrade].\\n     */\\n    constructor(string memory name, string memory version) {\\n        bytes32 hashedName = keccak256(bytes(name));\\n        bytes32 hashedVersion = keccak256(bytes(version));\\n        bytes32 typeHash = keccak256(\\n            \\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"\\n        );\\n        _HASHED_NAME = hashedName;\\n        _HASHED_VERSION = hashedVersion;\\n        _CACHED_CHAIN_ID = block.chainid;\\n        _CACHED_DOMAIN_SEPARATOR = _buildDomainSeparator(typeHash, hashedName, hashedVersion);\\n        _CACHED_THIS = address(this);\\n        _TYPE_HASH = typeHash;\\n    }\\n\\n    /**\\n     * @dev Returns the domain separator for the current chain.\\n     */\\n    function _domainSeparatorV4() internal view returns (bytes32) {\\n        if (address(this) == _CACHED_THIS && block.chainid == _CACHED_CHAIN_ID) {\\n            return _CACHED_DOMAIN_SEPARATOR;\\n        } else {\\n            return _buildDomainSeparator(_TYPE_HASH, _HASHED_NAME, _HASHED_VERSION);\\n        }\\n    }\\n\\n    function _buildDomainSeparator(\\n        bytes32 typeHash,\\n        bytes32 nameHash,\\n        bytes32 versionHash\\n    ) private view returns (bytes32) {\\n        return keccak256(abi.encode(typeHash, nameHash, versionHash, block.chainid, address(this)));\\n    }\\n\\n    /**\\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\\n     * function returns the hash of the fully encoded EIP712 message for this domain.\\n     *\\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\\n     *\\n     * ```solidity\\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\\n     *     keccak256(\\\"Mail(address to,string contents)\\\"),\\n     *     mailTo,\\n     *     keccak256(bytes(mailContents))\\n     * )));\\n     * address signer = ECDSA.recover(digest, signature);\\n     * ```\\n     */\\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\\n        return ECDSA.toTypedDataHash(_domainSeparatorV4(), structHash);\\n    }\\n}\\n\",\"keccak256\":\"0x6688fad58b9ec0286d40fa957152e575d5d8bd4c3aa80985efdb11b44f776ae7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/AttackOfTheClones.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/metatx/ERC2771Context.sol\\\";\\nimport \\\"@openzeppelin/contracts/metatx/MinimalForwarder.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/ConfirmedOwner.sol\\\";\\nimport \\\"./CryptopunksDataInterface.sol\\\";\\nimport \\\"./lib/Character.sol\\\";\\nimport \\\"./lib/Boss.sol\\\";\\nimport { IRewardNft } from \\\"./tokens/RewardNft.sol\\\";\\n\\ncontract AttackOfTheClones is ERC2771Context, VRFConsumerBaseV2, ConfirmedOwner{\\n\\n    using CharacterLib for Character;\\n    using BossLib for Boss;\\n\\n     struct RequestStatus {\\n        bool fulfilled; // whether the request has been successfully fulfilled\\n        bool exists; // whether a requestId exists\\n        uint256[] randomWords;\\n        address sender;\\n    }\\n\\n    VRFCoordinatorV2Interface public COORDINATOR;\\n    IERC20 public xpToken;\\n    CryptopunksDataInterface public cryptoPunks;\\n    IRewardNft public rewardNft;\\n\\n    uint32 callbackGasLimit = 200000;\\n    uint64 vrfSubscriptionId;\\n    uint256 public currentBoss;\\n    uint256 public charactersCount;\\n    uint256 constant public  maxBosses = 10000; // maxmum amount of bosses that can be generated (same of cryptopunks)\\n    uint256 public healthPoints; \\n    uint256 public maxHealthPoints; \\n    uint256 public regularDamagePoints; //damage caused by a regular attack\\n    uint256 public fireballDamagePoints; //damage caused by a fireball attack\\n    uint256 public bossesToGenerate; // amount of bosses to generate\\n    bytes32 public vrfKeyHash = 0x4b09e658ed251bcafeebbc69400383d49f344ace09b9576fe248bb02c003fe9f;\\n    Boss[] public bosses;\\n\\n    mapping(address => Character) public characters;\\n    mapping(address => mapping(uint256 => uint256)) public claimableExperience;// points for hitting boss\\n    mapping(uint256 => RequestStatus) public s_requests; /* requestId --> requestStatus */\\n\\n    event BossesPopulated(uint256 totalBosses);\\n    event RequestSent(uint256 requestId, uint32 numWords);\\n    event ReceivedRandomness(uint256 requestId, uint256[] randomWords);\\n    event CharacterGenerated(uint256 height);\\n    event AttackExecuted(uint256 xp);\\n    event BossInvoked(uint256 bossIndex);\\n    event CharacterHealed(address character);\\n    event RewardsClaimed(uint256 amount, uint256 tokenId );\\n\\n    constructor(\\n    IERC20 _xpToken, \\n    IRewardNft _rewardNft, \\n    address _cryptoPunks, \\n    MinimalForwarder forwarder, \\n    address _vrfCoordinator,\\n    uint64 _vrfSubscriptionId) \\n       ERC2771Context(address(forwarder)) \\n       ConfirmedOwner(_msgSender())\\n       VRFConsumerBaseV2(_vrfCoordinator) {\\n        healthPoints = 100;\\n        maxHealthPoints = 1000;\\n        regularDamagePoints = 5;\\n        fireballDamagePoints = 10;\\n\\n        cryptoPunks = CryptopunksDataInterface(_cryptoPunks);\\n        xpToken = _xpToken;\\n        rewardNft = _rewardNft;\\n        bossesToGenerate = 10;\\n        vrfSubscriptionId = _vrfSubscriptionId;\\n        COORDINATOR = VRFCoordinatorV2Interface(_vrfCoordinator);\\n    }\\n\\n    function generateCharacter() external {\\n        require(characters[_msgSender()].active == false, \\\"Character exists for this address\\\");\\n        requestRandomWords();\\n    }\\n\\n    /**\\n     * @notice called by chainlink vrf cordinator to complete the creation of a new character\\n     * @param height ramdomly generated address of the new character  \\n     * @param belongsTo the address that initiated the request\\n     */\\n    function completeGenerateCharacter(uint256 height, address belongsTo) private {\\n        require(characters[belongsTo].active == false, \\\"Character exists for this address\\\");\\n        characters[belongsTo] = Character({\\n            hp: healthPoints,\\n            damage: 0,\\n            xp:0,\\n            lastFireballAttack: 0,\\n            active: true,\\n            height: height\\n        });\\n        emit CharacterGenerated(height);\\n    }\\n\\n\\n    /**\\n     * @notice called by master or champion character to heal a dead character\\n     * @param characterToHeal address of the character to heal\\n     */\\n    function healCharacter(address characterToHeal) external {\\n        require(characters[_msgSender()].isAlive(), \\\"character is not active, cannot heal\\\");\\n        require(_msgSender() != characterToHeal, \\\"You cannot heal yourself\\\");\\n        require(characters[_msgSender()].isHealer(), \\\"Only a Champion or Master can heal\\\");\\n        characters[characterToHeal].damage = 0; \\n        emit CharacterHealed(characterToHeal);\\n    }\\n\\n    /**\\n     * @notice executes a regular attack\\n     */\\n    function regularAttack() external {\\n        require(bosses[currentBoss].active == true, \\\"No Boss to attack\\\");\\n        require(characters[_msgSender()].isAlive(), \\\"Character is not active, cannot attack\\\");\\n        _attack(_msgSender(), regularDamagePoints);\\n    }\\n\\n    /**\\n     * @dev executes a firball attack only callable by character with master or champion level\\n     */\\n    function fireballAttack() external {\\n        require(bosses[currentBoss].active == true, \\\"No Boss to attack\\\");\\n        require(characters[_msgSender()].isAlive(), \\\"Character is not active, cannot attack\\\"); \\n        require(characters[_msgSender()].isMaster(), \\\"Only a Master (Level 3) can cast fireball\\\");\\n        require(characters[_msgSender()].canCastFireBall(), \\\"Must wait 24 hours to cast fireball\\\");\\n         characters[_msgSender()].lastFireballAttack = block.timestamp;\\n        _attack(_msgSender(), fireballDamagePoints);\\n    }\\n\\n    function _attack(address _character, uint256 damage) private {\\n         Character storage character = characters[_character]; \\n        // attack boss\\n        bosses[currentBoss].damage  = bosses[currentBoss].damage +  damage; \\n        //counter attack \\n        characters[_character].damage =  characters[_character].damage  + damage;\\n        // increment players total experience\\n        characters[_character].xp =  characters[_character].xp + damage;\\n        // increment players claimable experience\\n        uint256 xp = claimableExperience[_character][currentBoss];\\n        claimableExperience[_character][currentBoss] = xp + damage;\\n         // character looses experience if dead\\n        if(character.isAlive() == false) {\\n            character.xp = 0;\\n        }\\n        // if current boss is dead, begin next boss\\n        if(bosses[currentBoss].isAlive() == false && bosses.length < maxBosses) {\\n            bosses[currentBoss].active = false;\\n            ++currentBoss;\\n            bosses[currentBoss].active = true;\\n        }\\n        emit AttackExecuted(character.xp);\\n    }\\n\\n    /**\\n     * @notice called by characters to claim rewards they earned by participating in attacking a boss\\n     * @param boss the boss which was attacked and killed  \\n     */\\n    function claimRewards(uint256 boss) external { \\n        require(bosses[boss].isAlive() == false, \\\"Boss is not defeated yet\\\");\\n        require(claimableExperience[_msgSender()][boss] > 0, \\\"You do not have claimable experience\\\");\\n        uint256 amount =  claimableExperience[_msgSender()][boss];\\n        claimableExperience[_msgSender()][boss] = 0;\\n        xpToken.transfer(_msgSender(), amount);\\n        uint256 tokenId = rewardNft.mint(_msgSender(), cryptoPunks.punkImageSvg(bosses[boss].punkIndex));\\n       emit RewardsClaimed(amount,tokenId );\\n    }\\n\\n    /**\\n     * @notice cpopulated bosses\\n     * @param bossHealthPoints health points tp be assigned to the new bosses \\n     */\\n    function populateBosses( uint256 bossHealthPoints) external onlyOwner() {\\n        require(bosses.length < maxBosses, \\\"Max bosses reached\\\");\\n        require(bossHealthPoints >= healthPoints && bossHealthPoints <= maxHealthPoints, \\\"Invalid health points\\\");\\n        uint256 _bossesToGenerate = bossesToGenerate;\\n        if(maxBosses - bosses.length < bossesToGenerate) {\\n            _bossesToGenerate = maxBosses - bosses.length ;\\n        }\\n        uint256 count = bosses.length;\\n        for(uint256 i = count; i < count + _bossesToGenerate; i++) {\\n            bosses.push(\\n                Boss({\\n                    hp: bossHealthPoints,\\n                    damage: 0,\\n                    reward: bossHealthPoints, \\n                    punkIndex: uint16(i),\\n                    active: false\\n                })\\n            );\\n        }\\n        emit BossesPopulated(bosses.length);\\n    }\\n\\n    /**\\n     * @notice loads a new currentBoss once the old boss is defeated. \\n     * @dev used to initialize the currentBoss at the start of the games \\n     */\\n    function invokeBoss() external onlyOwner() {\\n        require(bosses[currentBoss].active == false, \\\"cannot invoke boss, current boss is still active\\\");\\n        if(currentBoss !=0) {\\n            ++currentBoss;\\n         }  \\n        bosses[currentBoss].active = true;\\n        emit BossInvoked(currentBoss);\\n    }\\n\\n    \\n    /**\\n     * @notice  sets teh amount of damage caused by a regular attack\\n     */\\n    function setRegularDamagePoints(uint256 _regularDamagePoints) external onlyOwner{\\n        regularDamagePoints = _regularDamagePoints;\\n    }\\n\\n    /**\\n     * @notice  sets teh amount of damage caused by a fireball attack\\n     */\\n    function setFireballDamagePoints(uint256 _fireballDamagePoints) external onlyOwner{\\n        fireballDamagePoints = _fireballDamagePoints;\\n    }\\n\\n    function getBossesCount() external view returns(uint256){\\n        return bosses.length;\\n    }\\n\\n    function isCharacterAlive(address character) external view returns(bool){\\n        return characters[character].isAlive();\\n    }\\n\\n    function isBossAlive(uint256 bossIndex) external view returns(bool){\\n        return bosses[bossIndex].isAlive();\\n    }\\n\\n    function isCurrentBossAlive() external view returns(bool){\\n        return bosses[currentBoss].isAlive();\\n    }\\n\\n    function punkImage(uint16 index) external view returns (bytes memory) {\\n        return cryptoPunks.punkImage(index);\\n    }\\n\\n    /**\\n     * The Cryptopunk image for the given index, in SVG format.\\n     * In the SVG, each \\\"pixel\\\" is represented as a 1x1 rectangle.\\n     * @param index the punk index, 0 <= index < 10000\\n     */\\n    function punkImageSvg(uint16 index) external view returns (string memory svg) {\\n        return cryptoPunks.punkImageSvg(index);\\n    }\\n\\n    /**\\n     * The Cryptopunk attributes for the given index.\\n     * The attributes are a comma-separated list in UTF-8 string format.\\n     * The first entry listed is not technically an attribute, but the \\\"head type\\\" of the Cryptopunk.\\n     * @param index the punk index, 0 <= index < 10000\\n     */\\n    function punkAttributes(uint16 index) external view returns (string memory text) {\\n        return cryptoPunks.punkAttributes(index);\\n    }\\n\\n\\n    // Assumes the subscription is funded sufficiently.\\n    function requestRandomWords() private  returns (uint256 requestId) {\\n        // Will revert if subscription is not set and funded.\\n        requestId = COORDINATOR.requestRandomWords(\\n            vrfKeyHash,\\n            vrfSubscriptionId,\\n            3, //requestConfirmations,\\n            callbackGasLimit,\\n            1//numWords\\n        );\\n        s_requests[requestId] = RequestStatus({randomWords: new uint256[](0), exists: true, fulfilled: false, sender: _msgSender()});\\n        emit RequestSent(requestId, 1);\\n        return requestId;\\n    }\\n\\n    function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal override {\\n        require(s_requests[requestId].exists, 'request not found');\\n        s_requests[requestId].fulfilled = true;\\n        s_requests[requestId].randomWords = randomWords;\\n       completeGenerateCharacter(randomWords[0], s_requests[requestId].sender);\\n       charactersCount = charactersCount +1;\\n        emit ReceivedRandomness(requestId, randomWords);\\n    }\\n \\n}\\n\",\"keccak256\":\"0x578ca247e3a1c83e5e5748b2cbad81e74afe0d3f29b1bb63395ba89e496f4d73\",\"license\":\"Unlicense\"},\"contracts/CryptopunksDataInterface.sol\":{\"content\":\"/**\\n *Submitted for verification at Etherscan.io on 2021-08-18\\n*/\\n\\npragma solidity ^0.8.4;\\n\\n/**\\n *   ____                  _                          _          ____        _\\n *  / ___|_ __ _   _ _ __ | |_ ___  _ __  _   _ _ __ | | _____  |  _ \\\\  __ _| |_ __ _\\n * | |   | '__| | | | '_ \\\\| __/ _ \\\\| '_ \\\\| | | | '_ \\\\| |/ / __| | | | |/ _` | __/ _` |\\n * | |___| |  | |_| | |_) | || (_) | |_) | |_| | | | |   <\\\\__ \\\\ | |_| | (_| | || (_| |\\n *  \\\\____|_|   \\\\__, | .__/ \\\\__\\\\___/| .__/ \\\\__,_|_| |_|_|\\\\_\\\\___/ |____/ \\\\__,_|\\\\__\\\\__,_|\\n *             |___/|_|            |_|\\n *\\n * On-chain Cryptopunk images and attributes, by Larva Labs.\\n *\\n * This contract holds the image and attribute data for the Cryptopunks on-chain.\\n * The Cryptopunk images are available as raw RGBA pixels, or in SVG format.\\n * The punk attributes are available as a comma-separated list.\\n * Included in the attribute list is the head type (various color male and female heads,\\n * plus the rare zombie, ape, and alien types).\\n *\\n * This contract was motivated by community members snowfro and 0xdeafbeef, including a proof-of-concept contract created by 0xdeafbeef.\\n * Without their involvement, the project would not have come to fruition.\\n */\\ninterface CryptopunksDataInterface {\\n    /**\\n     * The Cryptopunk image for the given index.\\n     * The image is represented in a row-major byte array where each set of 4 bytes is a pixel in RGBA format.\\n     * @param index the punk index, 0 <= index < 10000\\n     */\\n    function punkImage(uint16 index) external view returns (bytes memory);\\n\\n    /**\\n     * The Cryptopunk image for the given index, in SVG format.\\n     * In the SVG, each \\\"pixel\\\" is represented as a 1x1 rectangle.\\n     * @param index the punk index, 0 <= index < 10000\\n     */\\n    function punkImageSvg(uint16 index) external view returns (string memory svg);\\n\\n    /**\\n     * The Cryptopunk attributes for the given index.\\n     * The attributes are a comma-separated list in UTF-8 string format.\\n     * The first entry listed is not technically an attribute, but the \\\"head type\\\" of the Cryptopunk.\\n     * @param index the punk index, 0 <= index < 10000\\n     */\\n    function punkAttributes(uint16 index) external view returns (string memory text);\\n}\",\"keccak256\":\"0x234698bc5f7ef5ee0e088a9cdc2392fe0ccdc6c062452b8ccad85c465650621a\"},\"contracts/lib/Boss.sol\":{\"content\":\" \\npragma solidity ^0.8.4;\\n\\nstruct Boss {\\n    uint256 hp;\\n    uint256 damage;\\n    uint256 reward;\\n    uint16 punkIndex; // nft index at cryptopunks\\n    bool active;\\n}\\n\\n// Library Definition\\nlibrary BossLib {\\n    \\n    function isAlive(Boss storage boss) internal view returns(bool) {\\n        return  boss.hp > boss.damage;\\n    }\\n    \\n}\",\"keccak256\":\"0x759a7643b3437625e9a3858a55df0379d49938f8153bf585ba59ba1d4fb7ff90\"},\"contracts/lib/Character.sol\":{\"content\":\" \\npragma solidity ^0.8.4;\\n\\nenum ExperienceLevel{\\n    Apprentice, // Level 0\\n    Warrior , // Level 1\\n    Champion, // Level 2\\n    Master // Level 3\\n }\\n\\n struct Character {\\n        uint256 hp;\\n        uint256 damage;\\n        uint256 xp;\\n        uint256 lastFireballAttack;\\n        bool active;\\n        uint256 height;\\n  }\\n\\n// Library Definition\\nlibrary CharacterLib {\\n    \\n    function experience(Character storage character) internal view  returns(ExperienceLevel level) {\\n        if(character.xp >= 20 && character.xp < 50 ) {\\n            return ExperienceLevel.Warrior;\\n        } else if(character.xp >= 50 && character.xp < 100) {\\n            return ExperienceLevel.Champion;\\n        } else if(character.xp > 100) {\\n            return ExperienceLevel.Master; \\n        }\\n    }\\n\\n    function isAlive(Character storage character) internal view returns(bool) {\\n        return  character.hp > character.damage;\\n    }\\n\\n    function canCastFireBall(Character storage character) internal view returns(bool) {\\n        return (character.lastFireballAttack + 1 days) <= block.timestamp;\\n    }\\n\\n    function isMaster(Character storage character) internal view returns(bool) {\\n         return experience(character) == ExperienceLevel.Master;\\n    }\\n\\n    function isChampion(Character storage character) internal view returns(bool) {\\n         return experience(character) == ExperienceLevel.Champion;\\n    }\\n\\n    function isHealer(Character storage character) internal view returns(bool) {\\n         return isChampion(character) || isMaster(character);\\n    }\\n}\",\"keccak256\":\"0xf0f393b5d992734cb80c06a24ad7ae39e2410c6b8c0aee04d78f51f7a50a8bed\"},\"contracts/tokens/RewardNft.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Base64.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract RewardNft is ERC721URIStorage, Ownable {\\n     using Strings for uint256;\\n     using Counters for Counters.Counter;\\n     Counters.Counter private _tokenIds;\\n\\n     constructor() ERC721(\\\"Chain Battles\\\", \\\"CBTLS\\\") Ownable(){\\n\\n     }\\n\\n    function generateTokenURI(uint256 tokenId, string memory svg ) private pure returns (string memory){\\n       bytes memory dataURI = abi.encodePacked(\\n        '{',\\n            '\\\"name\\\": \\\"Attack Of the clones #', tokenId.toString(), '\\\",',\\n            '\\\"description\\\": \\\"Battles on chain\\\",',\\n            '\\\"image\\\": \\\"', svg, '\\\"',\\n        '}'\\n        );\\n\\n        return string(\\n            abi.encodePacked(\\n                \\\"data:application/json;base64,\\\",\\n                Base64.encode(dataURI)\\n            )\\n        );\\n    } \\n\\n    function mint(address to, string memory svg) external onlyOwner() returns(uint256) {\\n        _tokenIds.increment();\\n        uint256 newItemId = _tokenIds.current();\\n        _safeMint(to, newItemId);\\n        _setTokenURI(newItemId, generateTokenURI(newItemId, svg));\\n        return newItemId;\\n    }\\n}\\n\\ninterface IRewardNft {\\n    function mint(address to, string memory svg) external returns(uint256);\\n}\",\"keccak256\":\"0x1b3f47aef4fbde282354373c376c5656028549c8d1aff3af5052d0002cec0c1e\",\"license\":\"Unlicense\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106102325760003560e01c806379ba509711610130578063a168fa89116100b8578063d409f2491161007c578063d409f24914610666578063d87b67c914610682578063e89dde4f146106a0578063eb7ee2a7146106be578063f2fde38b146106dc57610232565b8063a168fa89146105be578063a561b7d4146105f0578063ae5014b1146105fa578063b2a16d7114610618578063d3a7036c1461063657610232565b8063927d676b116100ff578063927d676b1461052757806397c2114f1461054357806398e1df07146105785780639b11a167146105965780639e9aa73c146105a057610232565b806379ba5097146104d7578063856f8c35146104e15780638da5cb5b146104ff57806391ef72451461051d57610232565b80634184f651116101be57806366143a541161018257806366143a5414610431578063729b7b5b1461044f57806374beb0471461046d578063751f73001461049d57806376dfe297146104a757610232565b80634184f65114610379578063424a513114610397578063572b6c05146103c75780635d863f80146103f75780636164264d1461041357610232565b80631a3c0408116102055780631a3c0408146102bd5780631fe543e3146102db578063204597e0146102f75780633b2bcbf11461032b5780633e5e0a961461034957610232565b8063041d443e146102375780630962ef79146102555780631826c9181461027157806319e6270b146102a1575b600080fd5b61023f6106f8565b60405161024c91906129c7565b60405180910390f35b61026f600480360381019061026a9190612a2c565b6106fe565b005b61028b60048036038101906102869190612ab7565b610b52565b6040516102989190612aff565b60405180910390f35b6102bb60048036038101906102b69190612a2c565b610ba2565b005b6102c5610bb4565b6040516102d29190612b29565b60405180910390f35b6102f560048036038101906102f09190612c9d565b610bba565b005b610311600480360381019061030c9190612a2c565b610c7a565b604051610322959493929190612d16565b60405180910390f35b610333610cdb565b6040516103409190612dc8565b60405180910390f35b610363600480360381019061035e9190612e0f565b610d01565b6040516103709190612ec4565b60405180910390f35b610381610dba565b60405161038e9190612f07565b60405180910390f35b6103b160048036038101906103ac9190612f22565b610de0565b6040516103be9190612b29565b60405180910390f35b6103e160048036038101906103dc9190612ab7565b610e05565b6040516103ee9190612aff565b60405180910390f35b610411600480360381019061040c9190612ab7565b610e5d565b005b61041b61106f565b6040516104289190612b29565b60405180910390f35b610439611075565b6040516104469190612b29565b60405180910390f35b61045761107b565b6040516104649190612b29565b60405180910390f35b61048760048036038101906104829190612e0f565b611081565b6040516104949190612fb7565b60405180910390f35b6104a561113a565b005b6104c160048036038101906104bc9190612e0f565b6113bf565b6040516104ce9190612fb7565b60405180910390f35b6104df611478565b005b6104e961160d565b6040516104f69190612b29565b60405180910390f35b610507611613565b6040516105149190612fe8565b60405180910390f35b61052561163c565b005b610541600480360381019061053c9190612a2c565b61175b565b005b61055d60048036038101906105589190612ab7565b61196d565b60405161056f96959493929190613003565b60405180910390f35b6105806119b6565b60405161058d9190612b29565b60405180910390f35b61059e6119bc565b005b6105a8611ad9565b6040516105b59190612aff565b60405180910390f35b6105d860048036038101906105d39190612a2c565b611b0c565b6040516105e793929190613064565b60405180910390f35b6105f8611b70565b005b610602611c18565b60405161060f91906130bc565b60405180910390f35b610620611c3e565b60405161062d9190612b29565b60405180910390f35b610650600480360381019061064b9190612a2c565b611c44565b60405161065d9190612aff565b60405180910390f35b610680600480360381019061067b9190612a2c565b611c77565b005b61068a611c89565b6040516106979190612b29565b60405180910390f35b6106a8611c96565b6040516106b59190612b29565b60405180910390f35b6106c6611c9c565b6040516106d391906130f8565b60405180910390f35b6106f660048036038101906106f19190612ab7565b611cc2565b005b600d5481565b6000151561072c600e838154811061071957610718613113565b5b9060005260206000209060040201611cde565b15151461076e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107659061318e565b60405180910390fd5b60006010600061077c611cf2565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008381526020019081526020016000205411610808576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107ff90613220565b60405180910390fd5b600060106000610816611cf2565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000838152602001908152602001600020549050600060106000610872611cf2565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600084815260200190815260200160002081905550600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb610907611cf2565b836040518363ffffffff1660e01b8152600401610925929190613240565b602060405180830381600087803b15801561093f57600080fd5b505af1158015610953573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109779190613295565b506000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663d0def5216109c0611cf2565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166374beb047600e8881548110610a1257610a11613113565b5b906000526020600020906004020160030160009054906101000a900461ffff166040518263ffffffff1660e01b8152600401610a4e91906132c2565b60006040518083038186803b158015610a6657600080fd5b505afa158015610a7a573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190610aa39190613383565b6040518363ffffffff1660e01b8152600401610ac09291906133cc565b602060405180830381600087803b158015610ada57600080fd5b505af1158015610aee573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b129190613411565b90507f38be9b012e428704c0fb2b81dfd53444b76ac4cd45c46cfd2d661f73d97cf47b8282604051610b4592919061343e565b60405180910390a1505050565b6000610b9b600f60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020611d24565b9050919050565b610baa611d38565b80600a8190555050565b600a5481565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610c6c57337f00000000000000000000000000000000000000000000000000000000000000006040517f1cf993f4000000000000000000000000000000000000000000000000000000008152600401610c63929190613467565b60405180910390fd5b610c768282611dc8565b5050565b600e8181548110610c8a57600080fd5b90600052602060002090600402016000915090508060000154908060010154908060020154908060030160009054906101000a900461ffff16908060030160029054906101000a900460ff16905085565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6060600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16633e5e0a96836040518263ffffffff1660e01b8152600401610d5e91906132c2565b60006040518083038186803b158015610d7657600080fd5b505afa158015610d8a573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190610db39190613531565b9050919050565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6010602052816000526040600020602052806000526040600020600091509150505481565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16149050919050565b610eab600f6000610e6c611cf2565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020611d24565b610eea576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ee1906135ec565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff16610f09611cf2565b73ffffffffffffffffffffffffffffffffffffffff161415610f60576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f5790613658565b60405180910390fd5b610fae600f6000610f6f611cf2565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020611f32565b610fed576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fe4906136ea565b60405180910390fd5b6000600f60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101819055507f3803c3903ee0466ce000ef1152b8f9cb5026276759586f63ce3e28a3a31b94af816040516110649190612fe8565b60405180910390a150565b60075481565b600b5481565b60095481565b6060600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166374beb047836040518263ffffffff1660e01b81526004016110de91906132c2565b60006040518083038186803b1580156110f657600080fd5b505afa15801561110a573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906111339190613383565b9050919050565b60011515600e6006548154811061115457611153613113565b5b906000526020600020906004020160030160029054906101000a900460ff161515146111b5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111ac90613756565b60405180910390fd5b611203600f60006111c4611cf2565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020611d24565b611242576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611239906137e8565b60405180910390fd5b611290600f6000611251611cf2565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020611f54565b6112cf576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112c69061387a565b60405180910390fd5b61131d600f60006112de611cf2565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020611f8c565b61135c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113539061390c565b60405180910390fd5b42600f6000611369611cf2565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600301819055506113bd6113b5611cf2565b600b54611fab565b565b6060600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166376dfe297836040518263ffffffff1660e01b815260040161141c91906132c2565b60006040518083038186803b15801561143457600080fd5b505afa158015611448573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906114719190613383565b9050919050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611508576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114ff90613978565b60405180910390fd5b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a350565b60065481565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b611644611d38565b60001515600e6006548154811061165e5761165d613113565b5b906000526020600020906004020160030160029054906101000a900460ff161515146116bf576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116b690613a0a565b60405180910390fd5b6000600654146116e0576006600081546116d890613a59565b919050819055505b6001600e600654815481106116f8576116f7613113565b5b906000526020600020906004020160030160026101000a81548160ff0219169083151502179055507fa8f8257fec178e3adbffc01c4232c915a2b45845892a64de5c4c7eceb176d3526006546040516117519190612b29565b60405180910390a1565b611763611d38565b612710600e80549050106117ac576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117a390613aee565b60405180910390fd5b60085481101580156117c057506009548111155b6117ff576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117f690613b5a565b60405180910390fd5b6000600c549050600c54600e8054905061271061181c9190613b7a565b101561183857600e805490506127106118359190613b7a565b90505b6000600e80549050905060008190505b82826118549190613bae565b81101561192b57600e6040518060a00160405280868152602001600081526020018681526020018361ffff16815260200160001515815250908060018154018082558091505060019003906000526020600020906004020160009091909190915060008201518160000155602082015181600101556040820151816002015560608201518160030160006101000a81548161ffff021916908361ffff16021790555060808201518160030160026101000a81548160ff0219169083151502179055505050808061192390613a59565b915050611848565b507fafc6d9efdab1dd5d7b8cd77a15dad5fd1b723684e4b254c2156218590ce56047600e805490506040516119609190612b29565b60405180910390a1505050565b600f6020528060005260406000206000915090508060000154908060010154908060020154908060030154908060040160009054906101000a900460ff16908060050154905086565b600c5481565b60011515600e600654815481106119d6576119d5613113565b5b906000526020600020906004020160030160029054906101000a900460ff16151514611a37576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a2e90613756565b60405180910390fd5b611a85600f6000611a46611cf2565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020611d24565b611ac4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611abb906137e8565b60405180910390fd5b611ad7611acf611cf2565b600a54611fab565b565b6000611b07600e60065481548110611af457611af3613113565b5b9060005260206000209060040201611cde565b905090565b60116020528060005260406000206000915090508060000160009054906101000a900460ff16908060000160019054906101000a900460ff16908060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905083565b60001515600f6000611b80611cf2565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060040160009054906101000a900460ff16151514611c0d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c0490613c76565b60405180910390fd5b611c1561236f565b50565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60085481565b6000611c70600e8381548110611c5d57611c5c613113565b5b9060005260206000209060040201611cde565b9050919050565b611c7f611d38565b80600b8190555050565b6000600e80549050905090565b61271081565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b611cca611d38565b611cd3816125d8565b50565b600033905090565b600081600101548260000154119050919050565b6000611cfd33610e05565b15611d1157601436033560601c9050611d20565b611d19611cd6565b9050611d21565b5b90565b600081600101548260000154119050919050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611dc6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611dbd90613ce2565b60405180910390fd5b565b6011600083815260200190815260200160002060000160019054906101000a900460ff16611e2b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e2290613d4e565b60405180910390fd5b60016011600084815260200190815260200160002060000160006101000a81548160ff02191690831515021790555080601160008481526020019081526020016000206001019080519060200190611e84929190612944565b50611ee081600081518110611e9c57611e9b613113565b5b60200260200101516011600085815260200190815260200160002060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16612705565b6001600754611eef9190613bae565b6007819055507f503df20b540cb151c1f9d21af3bdf1dc38d6f2022ff926a9cf33a33ab53511c18282604051611f26929190613e2c565b60405180910390a15050565b6000611f3d8261289f565b80611f4d5750611f4c82611f54565b5b9050919050565b6000600380811115611f6957611f68613e5c565b5b611f72836128d8565b6003811115611f8457611f83613e5c565b5b149050919050565b600042620151808360030154611fa29190613bae565b11159050919050565b6000600f60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020905081600e6006548154811061200557612004613113565b5b9060005260206000209060040201600101546120219190613bae565b600e6006548154811061203757612036613113565b5b90600052602060002090600402016001018190555081600f60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001015461209a9190613bae565b600f60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001018190555081600f60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206002015461212e9190613bae565b600f60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600201819055506000601060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000600654815260200190815260200160002054905082816121d79190613bae565b601060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006006548152602001908152602001600020819055506000151561223a83611d24565b1515141561224d57600082600201819055505b6000151561227d600e6006548154811061226a57612269613113565b5b9060005260206000209060040201611cde565b15151480156122925750612710600e80549050105b1561232e576000600e600654815481106122af576122ae613113565b5b906000526020600020906004020160030160026101000a81548160ff0219169083151502179055506006600081546122e690613a59565b919050819055506001600e6006548154811061230557612304613113565b5b906000526020600020906004020160030160026101000a81548160ff0219169083151502179055505b7feb969ba0672d08e80b57f75447c16c4b2ade50af42e7769b5ba2c95ae44823a282600201546040516123619190612b29565b60405180910390a150505050565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16635d3b1d30600d54600560189054906101000a900467ffffffffffffffff166003600560149054906101000a900463ffffffff1660016040518663ffffffff1660e01b8152600401612400959493929190613f43565b602060405180830381600087803b15801561241a57600080fd5b505af115801561242e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124529190613411565b90506040518060800160405280600015158152602001600115158152602001600067ffffffffffffffff81111561248c5761248b612b5a565b5b6040519080825280602002602001820160405280156124ba5781602001602082028036833780820191505090505b5081526020016124c8611cf2565b73ffffffffffffffffffffffffffffffffffffffff168152506011600083815260200190815260200160002060008201518160000160006101000a81548160ff02191690831515021790555060208201518160000160016101000a81548160ff0219169083151502179055506040820151816001019080519060200190612550929190612944565b5060608201518160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055509050507fcc58b13ad3eab50626c6a6300b1d139cd6ebb1688a7cced9461c2f7e762665ee8160016040516125cd929190613f96565b60405180910390a190565b3373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415612647576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161263e9061400b565b60405180910390fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167fed8889f560326eb138920d842192f0eb3dd22b4f139c87a2c57538e05bae127860405160405180910390a350565b60001515600f60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060040160009054906101000a900460ff1615151461279b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161279290613c76565b60405180910390fd5b6040518060c00160405280600854815260200160008152602001600081526020016000815260200160011515815260200183815250600f60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000820151816000015560208201518160010155604082015181600201556060820151816003015560808201518160040160006101000a81548160ff02191690831515021790555060a082015181600501559050507ffa9ce889f3e2a0c3ccbe48fc014cbd7599b173a6ddcbec0c29a7f13aff617899826040516128939190612b29565b60405180910390a15050565b6000600260038111156128b5576128b4613e5c565b5b6128be836128d8565b60038111156128d0576128cf613e5c565b5b149050919050565b600060148260020154101580156128f3575060328260020154105b15612901576001905061293f565b603282600201541015801561291a575060648260020154105b15612928576002905061293f565b60648260020154111561293e576003905061293f565b5b919050565b828054828255906000526020600020908101928215612980579160200282015b8281111561297f578251825591602001919060010190612964565b5b50905061298d9190612991565b5090565b5b808211156129aa576000816000905550600101612992565b5090565b6000819050919050565b6129c1816129ae565b82525050565b60006020820190506129dc60008301846129b8565b92915050565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b612a09816129f6565b8114612a1457600080fd5b50565b600081359050612a2681612a00565b92915050565b600060208284031215612a4257612a416129ec565b5b6000612a5084828501612a17565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000612a8482612a59565b9050919050565b612a9481612a79565b8114612a9f57600080fd5b50565b600081359050612ab181612a8b565b92915050565b600060208284031215612acd57612acc6129ec565b5b6000612adb84828501612aa2565b91505092915050565b60008115159050919050565b612af981612ae4565b82525050565b6000602082019050612b146000830184612af0565b92915050565b612b23816129f6565b82525050565b6000602082019050612b3e6000830184612b1a565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b612b9282612b49565b810181811067ffffffffffffffff82111715612bb157612bb0612b5a565b5b80604052505050565b6000612bc46129e2565b9050612bd08282612b89565b919050565b600067ffffffffffffffff821115612bf057612bef612b5a565b5b602082029050602081019050919050565b600080fd5b6000612c19612c1484612bd5565b612bba565b90508083825260208201905060208402830185811115612c3c57612c3b612c01565b5b835b81811015612c655780612c518882612a17565b845260208401935050602081019050612c3e565b5050509392505050565b600082601f830112612c8457612c83612b44565b5b8135612c94848260208601612c06565b91505092915050565b60008060408385031215612cb457612cb36129ec565b5b6000612cc285828601612a17565b925050602083013567ffffffffffffffff811115612ce357612ce26129f1565b5b612cef85828601612c6f565b9150509250929050565b600061ffff82169050919050565b612d1081612cf9565b82525050565b600060a082019050612d2b6000830188612b1a565b612d386020830187612b1a565b612d456040830186612b1a565b612d526060830185612d07565b612d5f6080830184612af0565b9695505050505050565b6000819050919050565b6000612d8e612d89612d8484612a59565b612d69565b612a59565b9050919050565b6000612da082612d73565b9050919050565b6000612db282612d95565b9050919050565b612dc281612da7565b82525050565b6000602082019050612ddd6000830184612db9565b92915050565b612dec81612cf9565b8114612df757600080fd5b50565b600081359050612e0981612de3565b92915050565b600060208284031215612e2557612e246129ec565b5b6000612e3384828501612dfa565b91505092915050565b600081519050919050565b600082825260208201905092915050565b60005b83811015612e76578082015181840152602081019050612e5b565b83811115612e85576000848401525b50505050565b6000612e9682612e3c565b612ea08185612e47565b9350612eb0818560208601612e58565b612eb981612b49565b840191505092915050565b60006020820190508181036000830152612ede8184612e8b565b905092915050565b6000612ef182612d95565b9050919050565b612f0181612ee6565b82525050565b6000602082019050612f1c6000830184612ef8565b92915050565b60008060408385031215612f3957612f386129ec565b5b6000612f4785828601612aa2565b9250506020612f5885828601612a17565b9150509250929050565b600081519050919050565b600082825260208201905092915050565b6000612f8982612f62565b612f938185612f6d565b9350612fa3818560208601612e58565b612fac81612b49565b840191505092915050565b60006020820190508181036000830152612fd18184612f7e565b905092915050565b612fe281612a79565b82525050565b6000602082019050612ffd6000830184612fd9565b92915050565b600060c0820190506130186000830189612b1a565b6130256020830188612b1a565b6130326040830187612b1a565b61303f6060830186612b1a565b61304c6080830185612af0565b61305960a0830184612b1a565b979650505050505050565b60006060820190506130796000830186612af0565b6130866020830185612af0565b6130936040830184612fd9565b949350505050565b60006130a682612d95565b9050919050565b6130b68161309b565b82525050565b60006020820190506130d160008301846130ad565b92915050565b60006130e282612d95565b9050919050565b6130f2816130d7565b82525050565b600060208201905061310d60008301846130e9565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f426f7373206973206e6f74206465666561746564207965740000000000000000600082015250565b6000613178601883612f6d565b915061318382613142565b602082019050919050565b600060208201905081810360008301526131a78161316b565b9050919050565b7f596f7520646f206e6f74206861766520636c61696d61626c652065787065726960008201527f656e636500000000000000000000000000000000000000000000000000000000602082015250565b600061320a602483612f6d565b9150613215826131ae565b604082019050919050565b60006020820190508181036000830152613239816131fd565b9050919050565b60006040820190506132556000830185612fd9565b6132626020830184612b1a565b9392505050565b61327281612ae4565b811461327d57600080fd5b50565b60008151905061328f81613269565b92915050565b6000602082840312156132ab576132aa6129ec565b5b60006132b984828501613280565b91505092915050565b60006020820190506132d76000830184612d07565b92915050565b600080fd5b600067ffffffffffffffff8211156132fd576132fc612b5a565b5b61330682612b49565b9050602081019050919050565b6000613326613321846132e2565b612bba565b905082815260208101848484011115613342576133416132dd565b5b61334d848285612e58565b509392505050565b600082601f83011261336a57613369612b44565b5b815161337a848260208601613313565b91505092915050565b600060208284031215613399576133986129ec565b5b600082015167ffffffffffffffff8111156133b7576133b66129f1565b5b6133c384828501613355565b91505092915050565b60006040820190506133e16000830185612fd9565b81810360208301526133f38184612f7e565b90509392505050565b60008151905061340b81612a00565b92915050565b600060208284031215613427576134266129ec565b5b6000613435848285016133fc565b91505092915050565b60006040820190506134536000830185612b1a565b6134606020830184612b1a565b9392505050565b600060408201905061347c6000830185612fd9565b6134896020830184612fd9565b9392505050565b600067ffffffffffffffff8211156134ab576134aa612b5a565b5b6134b482612b49565b9050602081019050919050565b60006134d46134cf84613490565b612bba565b9050828152602081018484840111156134f0576134ef6132dd565b5b6134fb848285612e58565b509392505050565b600082601f83011261351857613517612b44565b5b81516135288482602086016134c1565b91505092915050565b600060208284031215613547576135466129ec565b5b600082015167ffffffffffffffff811115613565576135646129f1565b5b61357184828501613503565b91505092915050565b7f636861726163746572206973206e6f74206163746976652c2063616e6e6f742060008201527f6865616c00000000000000000000000000000000000000000000000000000000602082015250565b60006135d6602483612f6d565b91506135e18261357a565b604082019050919050565b60006020820190508181036000830152613605816135c9565b9050919050565b7f596f752063616e6e6f74206865616c20796f757273656c660000000000000000600082015250565b6000613642601883612f6d565b915061364d8261360c565b602082019050919050565b6000602082019050818103600083015261367181613635565b9050919050565b7f4f6e6c792061204368616d70696f6e206f72204d61737465722063616e20686560008201527f616c000000000000000000000000000000000000000000000000000000000000602082015250565b60006136d4602283612f6d565b91506136df82613678565b604082019050919050565b60006020820190508181036000830152613703816136c7565b9050919050565b7f4e6f20426f737320746f2061747461636b000000000000000000000000000000600082015250565b6000613740601183612f6d565b915061374b8261370a565b602082019050919050565b6000602082019050818103600083015261376f81613733565b9050919050565b7f436861726163746572206973206e6f74206163746976652c2063616e6e6f742060008201527f61747461636b0000000000000000000000000000000000000000000000000000602082015250565b60006137d2602683612f6d565b91506137dd82613776565b604082019050919050565b60006020820190508181036000830152613801816137c5565b9050919050565b7f4f6e6c792061204d617374657220284c6576656c2033292063616e206361737460008201527f206669726562616c6c0000000000000000000000000000000000000000000000602082015250565b6000613864602983612f6d565b915061386f82613808565b604082019050919050565b6000602082019050818103600083015261389381613857565b9050919050565b7f4d757374207761697420323420686f75727320746f206361737420666972656260008201527f616c6c0000000000000000000000000000000000000000000000000000000000602082015250565b60006138f6602383612f6d565b91506139018261389a565b604082019050919050565b60006020820190508181036000830152613925816138e9565b9050919050565b7f4d7573742062652070726f706f736564206f776e657200000000000000000000600082015250565b6000613962601683612f6d565b915061396d8261392c565b602082019050919050565b6000602082019050818103600083015261399181613955565b9050919050565b7f63616e6e6f7420696e766f6b6520626f73732c2063757272656e7420626f737360008201527f206973207374696c6c2061637469766500000000000000000000000000000000602082015250565b60006139f4603083612f6d565b91506139ff82613998565b604082019050919050565b60006020820190508181036000830152613a23816139e7565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000613a64826129f6565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415613a9757613a96613a2a565b5b600182019050919050565b7f4d617820626f7373657320726561636865640000000000000000000000000000600082015250565b6000613ad8601283612f6d565b9150613ae382613aa2565b602082019050919050565b60006020820190508181036000830152613b0781613acb565b9050919050565b7f496e76616c6964206865616c746820706f696e74730000000000000000000000600082015250565b6000613b44601583612f6d565b9150613b4f82613b0e565b602082019050919050565b60006020820190508181036000830152613b7381613b37565b9050919050565b6000613b85826129f6565b9150613b90836129f6565b925082821015613ba357613ba2613a2a565b5b828203905092915050565b6000613bb9826129f6565b9150613bc4836129f6565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115613bf957613bf8613a2a565b5b828201905092915050565b7f4368617261637465722065786973747320666f7220746869732061646472657360008201527f7300000000000000000000000000000000000000000000000000000000000000602082015250565b6000613c60602183612f6d565b9150613c6b82613c04565b604082019050919050565b60006020820190508181036000830152613c8f81613c53565b9050919050565b7f4f6e6c792063616c6c61626c65206279206f776e657200000000000000000000600082015250565b6000613ccc601683612f6d565b9150613cd782613c96565b602082019050919050565b60006020820190508181036000830152613cfb81613cbf565b9050919050565b7f72657175657374206e6f7420666f756e64000000000000000000000000000000600082015250565b6000613d38601183612f6d565b9150613d4382613d02565b602082019050919050565b60006020820190508181036000830152613d6781613d2b565b9050919050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b613da3816129f6565b82525050565b6000613db58383613d9a565b60208301905092915050565b6000602082019050919050565b6000613dd982613d6e565b613de38185613d79565b9350613dee83613d8a565b8060005b83811015613e1f578151613e068882613da9565b9750613e1183613dc1565b925050600181019050613df2565b5085935050505092915050565b6000604082019050613e416000830185612b1a565b8181036020830152613e538184613dce565b90509392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b600067ffffffffffffffff82169050919050565b613ea881613e8b565b82525050565b6000819050919050565b6000613ed3613ece613ec984613eae565b612d69565b612cf9565b9050919050565b613ee381613eb8565b82525050565b600063ffffffff82169050919050565b613f0281613ee9565b82525050565b6000819050919050565b6000613f2d613f28613f2384613f08565b612d69565b613ee9565b9050919050565b613f3d81613f12565b82525050565b600060a082019050613f5860008301886129b8565b613f656020830187613e9f565b613f726040830186613eda565b613f7f6060830185613ef9565b613f8c6080830184613f34565b9695505050505050565b6000604082019050613fab6000830185612b1a565b613fb86020830184613f34565b9392505050565b7f43616e6e6f74207472616e7366657220746f2073656c66000000000000000000600082015250565b6000613ff5601783612f6d565b915061400082613fbf565b602082019050919050565b6000602082019050818103600083015261402481613fe8565b905091905056fea264697066735822122081b584422603452d5c448f9fde2279c2706ff99e7e0fd6c75146b607d500fbc364736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "claimRewards(uint256)": {
        "params": {
          "boss": "the boss which was attacked and killed  "
        }
      },
      "fireballAttack()": {
        "details": "executes a firball attack only callable by character with master or champion level"
      },
      "healCharacter(address)": {
        "params": {
          "characterToHeal": "address of the character to heal"
        }
      },
      "invokeBoss()": {
        "details": "used to initialize the currentBoss at the start of the games "
      },
      "populateBosses(uint256)": {
        "params": {
          "bossHealthPoints": "health points tp be assigned to the new bosses "
        }
      },
      "punkAttributes(uint16)": {
        "params": {
          "index": "the punk index, 0 <= index < 10000"
        }
      },
      "punkImageSvg(uint16)": {
        "params": {
          "index": "the punk index, 0 <= index < 10000"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "acceptOwnership()": {
        "notice": "Allows an ownership transfer to be completed by the recipient."
      },
      "claimRewards(uint256)": {
        "notice": "called by characters to claim rewards they earned by participating in attacking a boss"
      },
      "healCharacter(address)": {
        "notice": "called by master or champion character to heal a dead character"
      },
      "invokeBoss()": {
        "notice": "loads a new currentBoss once the old boss is defeated. "
      },
      "owner()": {
        "notice": "Get the current owner"
      },
      "populateBosses(uint256)": {
        "notice": "cpopulated bosses"
      },
      "punkAttributes(uint16)": {
        "notice": "The Cryptopunk attributes for the given index. The attributes are a comma-separated list in UTF-8 string format. The first entry listed is not technically an attribute, but the \"head type\" of the Cryptopunk."
      },
      "punkImageSvg(uint16)": {
        "notice": "The Cryptopunk image for the given index, in SVG format. In the SVG, each \"pixel\" is represented as a 1x1 rectangle."
      },
      "regularAttack()": {
        "notice": "executes a regular attack"
      },
      "setFireballDamagePoints(uint256)": {
        "notice": "sets teh amount of damage caused by a fireball attack"
      },
      "setRegularDamagePoints(uint256)": {
        "notice": "sets teh amount of damage caused by a regular attack"
      },
      "transferOwnership(address)": {
        "notice": "Allows an owner to begin transferring ownership to a new address, pending."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 27,
        "contract": "contracts/AttackOfTheClones.sol:AttackOfTheClones",
        "label": "s_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 29,
        "contract": "contracts/AttackOfTheClones.sol:AttackOfTheClones",
        "label": "s_pendingOwner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 4796,
        "contract": "contracts/AttackOfTheClones.sol:AttackOfTheClones",
        "label": "COORDINATOR",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(VRFCoordinatorV2Interface)446"
      },
      {
        "astId": 4799,
        "contract": "contracts/AttackOfTheClones.sol:AttackOfTheClones",
        "label": "xpToken",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(IERC20)2336"
      },
      {
        "astId": 4802,
        "contract": "contracts/AttackOfTheClones.sol:AttackOfTheClones",
        "label": "cryptoPunks",
        "offset": 0,
        "slot": "4",
        "type": "t_contract(CryptopunksDataInterface)5710"
      },
      {
        "astId": 4805,
        "contract": "contracts/AttackOfTheClones.sol:AttackOfTheClones",
        "label": "rewardNft",
        "offset": 0,
        "slot": "5",
        "type": "t_contract(IRewardNft)6012"
      },
      {
        "astId": 4808,
        "contract": "contracts/AttackOfTheClones.sol:AttackOfTheClones",
        "label": "callbackGasLimit",
        "offset": 20,
        "slot": "5",
        "type": "t_uint32"
      },
      {
        "astId": 4810,
        "contract": "contracts/AttackOfTheClones.sol:AttackOfTheClones",
        "label": "vrfSubscriptionId",
        "offset": 24,
        "slot": "5",
        "type": "t_uint64"
      },
      {
        "astId": 4812,
        "contract": "contracts/AttackOfTheClones.sol:AttackOfTheClones",
        "label": "currentBoss",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 4814,
        "contract": "contracts/AttackOfTheClones.sol:AttackOfTheClones",
        "label": "charactersCount",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 4819,
        "contract": "contracts/AttackOfTheClones.sol:AttackOfTheClones",
        "label": "healthPoints",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 4821,
        "contract": "contracts/AttackOfTheClones.sol:AttackOfTheClones",
        "label": "maxHealthPoints",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 4823,
        "contract": "contracts/AttackOfTheClones.sol:AttackOfTheClones",
        "label": "regularDamagePoints",
        "offset": 0,
        "slot": "10",
        "type": "t_uint256"
      },
      {
        "astId": 4825,
        "contract": "contracts/AttackOfTheClones.sol:AttackOfTheClones",
        "label": "fireballDamagePoints",
        "offset": 0,
        "slot": "11",
        "type": "t_uint256"
      },
      {
        "astId": 4827,
        "contract": "contracts/AttackOfTheClones.sol:AttackOfTheClones",
        "label": "bossesToGenerate",
        "offset": 0,
        "slot": "12",
        "type": "t_uint256"
      },
      {
        "astId": 4830,
        "contract": "contracts/AttackOfTheClones.sol:AttackOfTheClones",
        "label": "vrfKeyHash",
        "offset": 0,
        "slot": "13",
        "type": "t_bytes32"
      },
      {
        "astId": 4834,
        "contract": "contracts/AttackOfTheClones.sol:AttackOfTheClones",
        "label": "bosses",
        "offset": 0,
        "slot": "14",
        "type": "t_array(t_struct(Boss)5723_storage)dyn_storage"
      },
      {
        "astId": 4839,
        "contract": "contracts/AttackOfTheClones.sol:AttackOfTheClones",
        "label": "characters",
        "offset": 0,
        "slot": "15",
        "type": "t_mapping(t_address,t_struct(Character)5759_storage)"
      },
      {
        "astId": 4845,
        "contract": "contracts/AttackOfTheClones.sol:AttackOfTheClones",
        "label": "claimableExperience",
        "offset": 0,
        "slot": "16",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
      },
      {
        "astId": 4850,
        "contract": "contracts/AttackOfTheClones.sol:AttackOfTheClones",
        "label": "s_requests",
        "offset": 0,
        "slot": "17",
        "type": "t_mapping(t_uint256,t_struct(RequestStatus)4793_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(Boss)5723_storage)dyn_storage": {
        "base": "t_struct(Boss)5723_storage",
        "encoding": "dynamic_array",
        "label": "struct Boss[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(CryptopunksDataInterface)5710": {
        "encoding": "inplace",
        "label": "contract CryptopunksDataInterface",
        "numberOfBytes": "20"
      },
      "t_contract(IERC20)2336": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(IRewardNft)6012": {
        "encoding": "inplace",
        "label": "contract IRewardNft",
        "numberOfBytes": "20"
      },
      "t_contract(VRFCoordinatorV2Interface)446": {
        "encoding": "inplace",
        "label": "contract VRFCoordinatorV2Interface",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_address,t_struct(Character)5759_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct Character)",
        "numberOfBytes": "32",
        "value": "t_struct(Character)5759_storage"
      },
      "t_mapping(t_uint256,t_struct(RequestStatus)4793_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct AttackOfTheClones.RequestStatus)",
        "numberOfBytes": "32",
        "value": "t_struct(RequestStatus)4793_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(Boss)5723_storage": {
        "encoding": "inplace",
        "label": "struct Boss",
        "members": [
          {
            "astId": 5714,
            "contract": "contracts/AttackOfTheClones.sol:AttackOfTheClones",
            "label": "hp",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 5716,
            "contract": "contracts/AttackOfTheClones.sol:AttackOfTheClones",
            "label": "damage",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 5718,
            "contract": "contracts/AttackOfTheClones.sol:AttackOfTheClones",
            "label": "reward",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 5720,
            "contract": "contracts/AttackOfTheClones.sol:AttackOfTheClones",
            "label": "punkIndex",
            "offset": 0,
            "slot": "3",
            "type": "t_uint16"
          },
          {
            "astId": 5722,
            "contract": "contracts/AttackOfTheClones.sol:AttackOfTheClones",
            "label": "active",
            "offset": 2,
            "slot": "3",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(Character)5759_storage": {
        "encoding": "inplace",
        "label": "struct Character",
        "members": [
          {
            "astId": 5748,
            "contract": "contracts/AttackOfTheClones.sol:AttackOfTheClones",
            "label": "hp",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 5750,
            "contract": "contracts/AttackOfTheClones.sol:AttackOfTheClones",
            "label": "damage",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 5752,
            "contract": "contracts/AttackOfTheClones.sol:AttackOfTheClones",
            "label": "xp",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 5754,
            "contract": "contracts/AttackOfTheClones.sol:AttackOfTheClones",
            "label": "lastFireballAttack",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 5756,
            "contract": "contracts/AttackOfTheClones.sol:AttackOfTheClones",
            "label": "active",
            "offset": 0,
            "slot": "4",
            "type": "t_bool"
          },
          {
            "astId": 5758,
            "contract": "contracts/AttackOfTheClones.sol:AttackOfTheClones",
            "label": "height",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_struct(RequestStatus)4793_storage": {
        "encoding": "inplace",
        "label": "struct AttackOfTheClones.RequestStatus",
        "members": [
          {
            "astId": 4785,
            "contract": "contracts/AttackOfTheClones.sol:AttackOfTheClones",
            "label": "fulfilled",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 4787,
            "contract": "contracts/AttackOfTheClones.sol:AttackOfTheClones",
            "label": "exists",
            "offset": 1,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 4790,
            "contract": "contracts/AttackOfTheClones.sol:AttackOfTheClones",
            "label": "randomWords",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_uint256)dyn_storage"
          },
          {
            "astId": 4792,
            "contract": "contracts/AttackOfTheClones.sol:AttackOfTheClones",
            "label": "sender",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      }
    }
  }
}